# user  nginx;
# worker_processes  auto;

# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    # open_log_file_cache max=1000 inactive=20s;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  65;

    map $raw_url $ssrf_url {
        "~^(.*):/(.*)"  $1://$2;
        default        $raw_url;
    }

    map $http_referer $ssrf_referer {
      "~*/ssrf/(.*)" $1;
    }

    # set cache path
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache_zone:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    map $request_uri $cacheable {
            default 0;
            ~*.(gif|jpg|png|css|js)$ 1;
        }

    server {
        listen       80;
        server_name  127.0.0.1;
        server_name_in_redirect off; # let http://$server_name$request_uri  to http://$server_name in sub_filter


        location ~ ^/ssrf/(.*) {
            resolver 119.29.29.29 ipv6=off;
            set $raw_url $1;
            proxy_pass $ssrf_url?$args;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header  Authorization;

            sub_filter_types *;
            sub_filter_once off;
            sub_filter 'http://' 'http://$server_name/ssrf/http://';
            sub_filter 'https://' 'https://$server_name/ssrf/https://';
            sub_filter_last_modified on;

            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_valid 200 302 24h;
            add_header X-Cache-Status $upstream_cache_status;
        }

        location ~ ^/(.*) {
            resolver 119.29.29.29 ipv6=off;

            proxy_set_header Authorization $http_authorization;
            proxy_pass_header  Authorization;

            sub_filter_types *;
            sub_filter_once off;
            sub_filter 'http://' 'http://$server_name/ssrf/http://';
            sub_filter 'https://' 'https://$server_name/ssrf/https://';
            sub_filter_last_modified on;

            if ($http_referer ~* "/ssrf/") {
                    proxy_pass ${ssrf_referer}${request_uri};
                }
        }

        # location ~.*\.(gif|jpg|png|css|js)(.*) {
        #     proxy_cache cache_zone;
        #     proxy_cache_valid 200 302 24h;
        #     expires 1d;
        #     add_header X-Proxy-Cache $upstream_cache_status;
        # }
    }
}
